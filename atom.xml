<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>dhruv-ahuja</title>
    <link href="https://dhruvahuja.me/atom.xml" rel="self" type="application/atom+xml"/>
    <link href="https://dhruvahuja.me"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2024-05-21T00:00:00+00:00</updated>
    <id>https://dhruvahuja.me/atom.xml</id>
    <entry xml:lang="en">
        <title>A Story of Optimizing Mongo DB Writes</title>
        <published>2024-05-21T00:00:00+00:00</published>
        <updated>2024-05-21T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://dhruvahuja.me/posts/optimizing-mongo-writes/" type="text/html"/>
        <id>https://dhruvahuja.me/posts/optimizing-mongo-writes/</id>
        
        <content type="html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;&#x2F;h2&gt;
&lt;p&gt;I am developing an application for the game Path of Exile, that will predict item prices based on the item quantity and the item price history throughout the season. It is a straightforward implementation that updates the prices for items at a fixed frequency, and requires items and their categories to be pre-populated in the database.&lt;&#x2F;p&gt;
&lt;p&gt;I am running my MongoDB server on the Atlas Free Tier, hosted on AWS.&lt;&#x2F;p&gt;
&lt;p&gt;The core flow is as follows: there are several categories for whom we already have general information prepared, we first create &lt;code&gt;ItemCategory&lt;&#x2F;code&gt;  documents with this information for each category. Then we fetch data for all items belonging to that category. The &lt;a href=&quot;https:&#x2F;&#x2F;poe.ninja&quot; title=&quot;https:&#x2F;&#x2F;poe.ninja&quot;&gt;poe.ninja&lt;&#x2F;a&gt; website caches its API responses and we’re able to quickly fetch the desired data even with relatively large responses. We initially made all these API calls in a loop, and the whole process was quite smooth as the response time is always quick. Upon getting the data and parsing each entity in the response array into Pydantic models, we then map the data in the form &lt;code&gt;&amp;lt;category_name: item_data&amp;gt;&lt;&#x2F;code&gt; where &lt;code&gt;item_data&lt;&#x2F;code&gt; is the list of items we fetched from the API. Do keep in mind that this flow will change as optimize the script down the line.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;pydantic-its-usage-here&quot;&gt;Pydantic &amp;amp; Its Usage Here  &lt;&#x2F;h2&gt;
&lt;p&gt;We create either &lt;code&gt;CurrencyItemEntity&lt;&#x2F;code&gt; or  &lt;code&gt;ItemEntity&lt;&#x2F;code&gt;  Pydantic model instances for each entity in API responses, based on whether it belongs to &lt;code&gt;Currency&lt;&#x2F;code&gt; or the other &lt;code&gt;Item&lt;&#x2F;code&gt; type, as items in the &lt;code&gt;Currency&lt;&#x2F;code&gt; category have a separate API response schema. Pydantic helps maintain data integrity and validates the response data, making it easier to deal with potentially unstructured third-party data (although the APIs in this case are very consistent). There would definitely be an additional overhead for parsing the item data into a Pydantic model instance for each entity, but being able to enforce schema for third-party data in this case, and getting consistent type hint support is well worth it. Its performance has also been vastly improved with the version 2.0 release that happened late last year.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-naive-approach-single-insertions&quot;&gt;The Naive Approach: Single Insertions&lt;&#x2F;h2&gt;
&lt;p&gt;The code for the naive approach and the first iteration of the script is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;dhruv-ahuja&#x2F;backend_burger&#x2F;blob&#x2F;c7337e97601e72dd80979ba9cf7ab25111283237&#x2F;src&#x2F;scripts&#x2F;poe_initial.py&quot; title=&quot;https:&#x2F;&#x2F;github.com&#x2F;dhruv-ahuja&#x2F;backend_burger&#x2F;blob&#x2F;c7337e97601e72dd80979ba9cf7ab25111283237&#x2F;src&#x2F;scripts&#x2F;poe_initial.py&quot;&gt;available here&lt;&#x2F;a&gt;. Here we are iterating over all categories, getting their response data and mapping them into the hashmap with &lt;code&gt;category name&lt;&#x2F;code&gt; as key, and the &lt;code&gt;data array&lt;&#x2F;code&gt; as value. It does not take much time to gather data for 31,000+ items, as mentioned above due to the quick API responses.&lt;&#x2F;p&gt;
&lt;p&gt;Calling &lt;code&gt;save_item_data&lt;&#x2F;code&gt;, It takes us an average of &lt;strong&gt;1216 seconds&lt;&#x2F;strong&gt; or &lt;strong&gt;20 minutes 16 seconds&lt;&#x2F;strong&gt; to parse each entity’s data, create and insert &lt;code&gt;Item&lt;&#x2F;code&gt; document instances and save them to the database one-by-one. I think this time is acceptable since the script meant to be run rarely, however it is practically very slow and not convenient. This makes extending the script or re-running it a chore. I am also interested in knowing how much time we can shave off from this, especially since there is a very simple optimization available. Memory usage for this approach would be high too, since we’re loading all item data entities in memory and have two objects for each entity. We will look into memory management after improving the execution time.&lt;&#x2F;p&gt;
&lt;p&gt;Each save call requires network round trips between the app and the database, and database processing time. These accumulate rapidly as we save a large number of documents one-by-one.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-good-approach-bulk-insertions&quot;&gt;The Good Approach: Bulk Insertions&lt;&#x2F;h2&gt;
&lt;p&gt;The modified script using approach is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;dhruv-ahuja&#x2F;backend_burger&#x2F;blob&#x2F;d88fecd8a44626445f56131544307abee500a98a&#x2F;src&#x2F;scripts&#x2F;poe_initial.py&quot; title=&quot;https:&#x2F;&#x2F;github.com&#x2F;dhruv-ahuja&#x2F;backend_burger&#x2F;blob&#x2F;d88fecd8a44626445f56131544307abee500a98a&#x2F;src&#x2F;scripts&#x2F;poe_initial.py&quot;&gt;available here&lt;&#x2F;a&gt;. I found using &lt;code&gt;insertMany&lt;&#x2F;code&gt; for bulk-inserts the most common and the most impactful approach, when I looked for improvement advice. Pushing all DB instances to an array and bulk-inserting them all at once, took us just ~10.7 seconds!  This is an incredible improvement and should be the first choice if you need to insert multiple documents.&lt;&#x2F;p&gt;
&lt;p&gt;The problem here is the memory usage, which peaks at roughly 350MB and only drops towards the end of the script, where we see memory being released.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;mongodb_writes&#x2F;poe_script_memory_usage.png&quot; alt=&quot;Bulk-Inserts Memory Consumption&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This can be verified by simply restricting the maximum length of the &lt;code&gt;item_data&lt;&#x2F;code&gt; array to 10,000, which would restrict the number of accessed item data records of the &lt;code&gt;BaseType&lt;&#x2F;code&gt; category, which has contains much more items. Making this change reduces the peak memory usage to ~285MB.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;mongodb_writes&#x2F;poe_script_limited_memory_usage.png&quot; alt=&quot;Bulk-Inserts Memory Consumption, Restricted Object Count&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;We can make one more improvement which will reduce both the memory usage and execution time, but requires a significant code refactor.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-better-approach-producer-consumer-pattern&quot;&gt;The Better Approach: Producer-Consumer Pattern&lt;&#x2F;h2&gt;
&lt;p&gt;The mostly overhauled script using this approach is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;dhruv-ahuja&#x2F;backend_burger&#x2F;blob&#x2F;bb50fbac45fa38df28f48753690655fb2ee901b2&#x2F;src&#x2F;scripts&#x2F;poe_initial.py&quot; title=&quot;https:&#x2F;&#x2F;github.com&#x2F;dhruv-ahuja&#x2F;backend_burger&#x2F;blob&#x2F;bb50fbac45fa38df28f48753690655fb2ee901b2&#x2F;src&#x2F;scripts&#x2F;poe_initial.py&quot;&gt;available here&lt;&#x2F;a&gt;. We rewrote the main functions, moved API calls to their own functions, added more logging statements, handled errors and wrapped the async functions into async &lt;code&gt;Task&lt;&#x2F;code&gt;s. These pass data using dedicated &lt;code&gt;Queue&lt;&#x2F;code&gt;s and run until they get the termination signals using sentinel values.&lt;&#x2F;p&gt;
&lt;p&gt;Implementing Async Producer and Consumers means we now process information faster, by using different async tasks to concurrently get API data, parse that data, and save documents in bulk in the database.&lt;&#x2F;p&gt;
&lt;p&gt;This coordination allows us to reduce the time taken further to about 9 seconds, and all the tasks finish execution almost one after the other. This is an improvement of about 1.7 seconds over the bulk-insert implementation. We also witness a big drop in memory usage, with the peak memory usage being ~271MB, or an improvement of ~ 22.6% over the previous consumption of 350MB. These are fantastic results, in my opinion.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;mongodb_writes&#x2F;poe_script_async.png&quot; alt=&quot;Optimal Approach Memory Consumption&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;This was a journey where I got hands-on with some general performance improvements for database writes and also implemented the common but very effective Producer-Consumer design pattern. I am sure that there are things that I missed and certain aspects that can be handled better, I’ll be keeping an eye out for any improvements.&lt;&#x2F;p&gt;
&lt;p&gt;It was a great learning and experimental experience for me, and I hope that this made a good read for you. Please do not hesitate to &lt;a href=&quot;mailto:dhruvahuja2k@gmail.com&#x2F;&quot; title=&quot;mailto:dhruvahuja2k@gmail.com&#x2F;&quot;&gt;email me&lt;&#x2F;a&gt; if you wish to discuss anything. I will be adding comments functionality to the site soon.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Tag-Based Python CI&#x2F;CD Pipeline</title>
        <published>2024-03-05T00:00:00+00:00</published>
        <updated>2024-03-05T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://dhruvahuja.me/posts/tag-based-ci-cd-pipeline/" type="text/html"/>
        <id>https://dhruvahuja.me/posts/tag-based-ci-cd-pipeline/</id>
        
        <content type="html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;&#x2F;h2&gt;
&lt;p&gt;I recently setup a CI&#x2F;CD pipeline using &lt;a href=&quot;https:&#x2F;&#x2F;docs.github.com&#x2F;en&#x2F;actions&#x2F;quickstart&quot; title=&quot;https:&#x2F;&#x2F;docs.github.com&#x2F;en&#x2F;actions&#x2F;quickstart&quot;&gt;GitHub Actions&lt;&#x2F;a&gt;, to automate code quality management, testing and Docker image deployment for &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;dhruv-ahuja&#x2F;backend_burger&quot; title=&quot;https:&#x2F;&#x2F;github.com&#x2F;dhruv-ahuja&#x2F;backend_burger&quot;&gt;my Python webapp&lt;&#x2F;a&gt;. The CI workflow triggers on every commit to the &lt;code&gt;main&lt;&#x2F;code&gt; branch and formats, lints and tests the code. It uses a Redis &lt;a href=&quot;https:&#x2F;&#x2F;docs.github.com&#x2F;en&#x2F;actions&#x2F;using-containerized-services&#x2F;about-service-containers&quot; title=&quot;https:&#x2F;&#x2F;docs.github.com&#x2F;en&#x2F;actions&#x2F;using-containerized-services&#x2F;about-service-containers&quot;&gt;service container&lt;&#x2F;a&gt; since the integration tests call the API endpoints, which use a caching layer before accessing the database. It also uses an action step to debug failures. The CD workflow runs on new tag pushes to the repository. Both workflows can also be run manually.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s get started with the setup.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;initial-setup&quot;&gt;Initial Setup&lt;&#x2F;h2&gt;
&lt;p&gt;Create a Docker Hub repository to push the images to, and generate a &lt;code&gt;read-write&lt;&#x2F;code&gt; scope Access Token for use with the workflows. Copy the token for use in the next step.&lt;&#x2F;p&gt;
&lt;p&gt;Next, setup environment secrets so that our application can access these values during the testing step. Go to the &lt;code&gt;Settings&lt;&#x2F;code&gt; → &lt;code&gt;Secrets and variables&lt;&#x2F;code&gt; → &lt;code&gt;Actions&lt;&#x2F;code&gt; panel in the GitHub repository and define the any repository secrets required during the workflow’s execution. Also define the Docker username and password secrets here. Use the access token generated above for &lt;code&gt;DOCKER_PASSWORD&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;repository_secrets.png&quot; alt=&quot;Manage Repository Secrets&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;creating-the-ci-workflow&quot;&gt;Creating the CI Workflow&lt;&#x2F;h2&gt;
&lt;p&gt;Create a &lt;code&gt;.github&#x2F;workflows&lt;&#x2F;code&gt; folder in your local codebase and a &lt;code&gt;ci.yml&lt;&#x2F;code&gt;  file, adding the following code at the top of the file:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#212121;color:#eeffff;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;CI
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;on&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;branches&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;main
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;workflow_dispatch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: {}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;concurrency&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;group&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;${{ github.workflow }}-${{ github.ref }}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;cancel-in-progress&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This defines that the &lt;code&gt;CI&lt;&#x2F;code&gt; workflow runs only when code is pushed to the &lt;code&gt;main&lt;&#x2F;code&gt; branch. &lt;code&gt;workflow_dispatch: {}&lt;&#x2F;code&gt;  allows us to run the workflow manually from the &lt;code&gt;Actions&lt;&#x2F;code&gt; page. Our &lt;code&gt;concurrency&lt;&#x2F;code&gt; configuration ensures that the workflow’s runs are grouped together under one Git reference value and that only one run happens at a time. If a workflow is underway and another is triggered, the current run is cancelled in favour of the newer run.&lt;&#x2F;p&gt;
&lt;p&gt;Next, define the list of environment variables required by the application like so:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#212121;color:#eeffff;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;env&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;DB_URL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;${{secrets.DB_URL}}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;JWT_SECRET_KEY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;${{secrets.JWT_SECRET_KEY}}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;AWS_ACCESS_KEY_ID&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;${{secrets.AWS_ACCESS_KEY_ID}}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;AWS_SECRET_ACCESS_KEY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;${{secrets.AWS_SECRET_ACCESS_KEY}}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;AWS_REGION_NAME&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;${{secrets.AWS_REGION_NAME}}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;SQS_QUEUE_NAME&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;${{secrets.SQS_QUEUE_NAME}}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;S3_BUCKET_URL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;${{secrets.S3_BUCKET_URL}}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;S3_BUCKET_NAME&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;${{secrets.S3_BUCKET_NAME}}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;S3_LOGS_FOLDER&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;${{secrets.S3_LOGS_FOLDER}}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;REDIS_HOST&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;localhost
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We define environment variables by reading the repository secrets we set in the initial setup section, with the exception of &lt;code&gt;REDIS_HOST&lt;&#x2F;code&gt;, which is set to &lt;code&gt;localhost&lt;&#x2F;code&gt; to enable our application access to the Redis service.&lt;&#x2F;p&gt;
&lt;p&gt;Now comes the main part for the CI logic, the job itself:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#212121;color:#eeffff;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;jobs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;runs-on&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;ubuntu-latest
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;services&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#4a4a4a;&quot;&gt;# Label used to access the service container
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;redis&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;redis
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#4a4a4a;&quot;&gt;# Set health checks to wait until redis has started
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;options&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c792ea;&quot;&gt;-
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;                    --health-cmd &amp;quot;redis-cli ping&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;                    --health-interval 10s
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;                    --health-timeout 5s
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;                    --health-retries 5
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;ports&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;6379:6379
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;steps&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;Checkout
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;uses&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;actions&#x2F;checkout@v4
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;Setup Python
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;uses&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;actions&#x2F;setup-python@v4
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;with&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;python-version&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;3.11&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;cache&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;pip&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;Install PyCurl Dependencies
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: 
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;sudo apt-get update &amp;amp;&amp;amp; sudo apt-get install -y curl libcurl4-openssl-dev build-essential libssl-dev
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;Install Dependencies
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;python -m pip install --upgrade pip
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;pip install -r requirements.txt
&lt;&#x2F;span&gt;&lt;span&gt;            
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;Test code
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: 
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;pytest . -s -v -W ignore
&lt;&#x2F;span&gt;&lt;span&gt;            
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;Check Code Formatting
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;ruff format --line-length=120 --check . 
&lt;&#x2F;span&gt;&lt;span&gt;            
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;Check Code Linting
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: 
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;ruff check .
&lt;&#x2F;span&gt;&lt;span&gt;            
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;Setup Tmate Session
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;${{ failure() }}
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;uses&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;mxschmitt&#x2F;action-tmate@v3
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let’s walk through the job’s specifics, step-by-step.&lt;&#x2F;p&gt;
&lt;p&gt;The Redis service logic sets up a Redis container with health check options to ensure that the workflow waits for it to boot up, and exposes port &lt;code&gt;6379&lt;&#x2F;code&gt; to make it accessible to the application when we run the tests.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Checkout&lt;&#x2F;code&gt; makes the repository’s code available to the workflow, and &lt;code&gt;Setup Python&lt;&#x2F;code&gt; setups the specific Python version — &lt;code&gt;3.11&lt;&#x2F;code&gt; in our case — and caches the dependencies installed by &lt;code&gt;pip&lt;&#x2F;code&gt; to make future workflow runs faster. &lt;code&gt;Install Pycurl Dependencies&lt;&#x2F;code&gt; installs the dependencies required by the &lt;code&gt;pycurl&lt;&#x2F;code&gt; Python library on Ubuntu. The following step installs the Python dependencies used by our application.&lt;&#x2F;p&gt;
&lt;p&gt;The code testing step runs the &lt;code&gt;pytest&lt;&#x2F;code&gt; test suite gathers and runs all tests in the current directory. My project has a few unit tests and integration tests for each API endpoint. The &lt;code&gt;-s&lt;&#x2F;code&gt; flag outputs any Python print statements to the stdout stream, and &lt;code&gt;-v&lt;&#x2F;code&gt; runs the tests in verbose mode, giving us a detailed overview of the ongoing tests. I have added &lt;code&gt;-W ignore&lt;&#x2F;code&gt; to ignore the warnings emitted during the execution of the tests, primarily to help avoid the &lt;code&gt;Pydantic v1 deprecation warnings&lt;&#x2F;code&gt; issued for third party libraries.&lt;&#x2F;p&gt;
&lt;p&gt;I am using &lt;code&gt;Ruff&lt;&#x2F;code&gt; as the formatter and linter of choice, it is very fast and I feel that it has good linting rules without being overly restrictive. It is easy to setup formatting, lint and type checks in editors and is a one-time setup and I feel that it really helps keep the codebase maintainable in the long run.&lt;&#x2F;p&gt;
&lt;p&gt;The next two steps check for formatting and lint errors in the code and stop the workflow in case of any errors. This ensures that contributing developers adhere to Ruff’s code quality standards.&lt;&#x2F;p&gt;
&lt;p&gt;The last step is optional, and only runs if any of the previous steps fails. It allows us to ssh into the currently ongoing workflow session to check the environment and debug issues. Be careful though, it kept running for quite a while since I forgot to cancel the workflow run manually.  I am not sure if it has a time limit or it keeps running indefinitely.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;creating-the-cd-workflow&quot;&gt;Creating the CD workflow&lt;&#x2F;h2&gt;
&lt;p&gt; The CD pipeline is quite straightforward:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#212121;color:#eeffff;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;CD
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;on&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;tags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;v*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#4a4a4a;&quot;&gt;# allow manually triggering this workflow
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;workflow_dispatch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: {}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;concurrency&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;group&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;${{ github.workflow }}-${{ github.ref }}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;cancel-in-progress&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;jobs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;deploy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;runs-on&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;ubuntu-latest
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;steps&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;Checkout
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;uses&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;actions&#x2F;checkout@v4
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;Log into Docker Hub
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;uses&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;docker&#x2F;login-action@v3
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;with&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;${{secrets.DOCKER_USERNAME}}
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;password&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;${{secrets.DOCKER_PASSWORD}}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;Get Latest Tag
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;latest-tag
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;uses&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;WyriHaximus&#x2F;github-action-get-previous-tag@v1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;with&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;fallback&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;latest
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;Build and push Docker image
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;uses&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;docker&#x2F;build-push-action@v5
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;with&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;tags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;dhruvahuja&#x2F;backend_burger:${{ steps.latest-tag.outputs.tag }}
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07178;&quot;&gt;labels&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;${{steps.latest-tag.outputs.tag}}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We define the workflow to either run manually or when a new tag prefixed by &lt;code&gt;v&lt;&#x2F;code&gt; is pushed to the repository, example. &lt;code&gt;v0.0.1&lt;&#x2F;code&gt;. &lt;code&gt;Checkout&lt;&#x2F;code&gt; is required to allow getting git tag in the third step. The next step reads the Docker username and password from repository secrets and logs us into Docker Hub. &lt;code&gt;Get Latest Tag&lt;&#x2F;code&gt; reads the tag which was just pushed, if the workflow was triggered by a tag push, otherwise defaulting to &lt;code&gt;latest&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The final step builds the Docker image with the version tag and label, and pushes it to the Docker repository URL, defined in the &lt;code&gt;tags&lt;&#x2F;code&gt; directive. In this case, &lt;code&gt;dhruvahuja&#x2F;backend_burger&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;That’s it, our CI&#x2F;CD pipeline is ready! There are Actions available for all sort of use-cases, and you can remove or add steps according to your needs. For example, you may choose to ssh into a server after the &lt;code&gt;Build and push Docker image&lt;&#x2F;code&gt; step to pull and run the new image. I did not add this particular step since I did not have a need for it at the moment.&lt;&#x2F;p&gt;
&lt;p&gt;I chose the tag-based approach for the deployment process since I wanted to deploy new images only on specific milestones, which I can manage with version tags.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Writing Rust Bindings for My Python App</title>
        <published>2023-11-06T00:00:00+00:00</published>
        <updated>2023-11-06T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://dhruvahuja.me/posts/writing-rust-bindings/" type="text/html"/>
        <id>https://dhruvahuja.me/posts/writing-rust-bindings/</id>
        
        <content type="html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;dhruv-ahuja&#x2F;spoti-dl&quot; title=&quot;https:&#x2F;&#x2F;github.com&#x2F;dhruv-ahuja&#x2F;spoti-dl&quot;&gt;spoti-dl&lt;&#x2F;a&gt;, a Python-based CLI song downloading tool was the first “proper” application that I developed. It acted as a proof-of-concept of my programming skills as a self-taught developer, and helped me land my first job. However, it lacked some basic features, mainly- no parallel downloads for albums and playlists.&lt;&#x2F;p&gt;
&lt;p&gt;I recently added a few new features and re-wrote its core functionality in Rust, as I have been enjoying working with Rust’s robust type system, compiler-level error handling and syntax.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;development&quot;&gt;Development&lt;&#x2F;h2&gt;
&lt;p&gt;Development was relatively smooth for the most part, as the app logic is straightforward — you accept and parse the input Spotify link, the CLI flag parameters and process downloads. I figured out general things by googling and&#x2F;or through some experimentation, such as the trait implementations to parse CLI flags from &lt;code&gt;String&lt;&#x2F;code&gt;s into &lt;code&gt;enum&lt;&#x2F;code&gt;s and vice-versa. The &lt;code&gt;lazy_static&lt;&#x2F;code&gt; macro helped me allocate a static &lt;code&gt;HashSet&lt;&#x2F;code&gt; containing disallowed characters for files and folder names, on runtime. I also became more comfortable with bound traits and experienced the power of generics. I was able to use the following function across all of my download flows, as it accepts any input &lt;code&gt;P&lt;&#x2F;code&gt; that can be referenced as &lt;code&gt;Path&lt;&#x2F;code&gt; and any input &lt;code&gt;S&lt;&#x2F;code&gt; that can be converted into a &lt;code&gt;String&lt;&#x2F;code&gt; type:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#212121;color:#eeffff;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#c792ea;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;add_metadata&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;P, S&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;file_path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; P,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;album_art_path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; P,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;simple_song&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;spotify&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;SimpleSong,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;album_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; S,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c792ea;&quot;&gt;where
&lt;&#x2F;span&gt;&lt;span&gt;    P&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffcb6b;&quot;&gt;AsRef&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;Path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; + Debug,
&lt;&#x2F;span&gt;&lt;span&gt;    S&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffcb6b;&quot;&gt;Into&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffcb6b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;{...}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I mainly struggled when implementing the async logic to download songs in parallel, due to my inexperience with writing async code in Rust. I had to spend a lot of time working with the compiler’s restrictions and &lt;a href=&quot;https:&#x2F;&#x2F;tokio.rs&#x2F;&quot; title=&quot;https:&#x2F;&#x2F;tokio.rs&#x2F;&quot;&gt;Tokio’s&lt;&#x2F;a&gt; &lt;code&gt;’static + Send&lt;&#x2F;code&gt; requirements for spawning tasks, as its work-stealing scheduler model means that a task running in one thread could be picked up by another thread. I used &lt;code&gt;tokio::task::block_in_place&lt;&#x2F;code&gt; to wrap the &lt;code&gt;add_metadata&lt;&#x2F;code&gt; function call as the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Serial-ATA&#x2F;lofty-rs&quot; title=&quot;https:&#x2F;&#x2F;github.com&#x2F;Serial-ATA&#x2F;lofty-rs&quot;&gt;lofty&lt;&#x2F;a&gt; crate does not support async.&lt;&#x2F;p&gt;
&lt;p&gt;I added a CLI flag, allowing users to specify the number of tasks to use to process parallel downloads, and used batch downloads of 100 songs for playlists, as they can contain several thousands of songs.&lt;&#x2F;p&gt;
&lt;p&gt;The following is the core async logic for parallel downloads — calculate songs to be downloaded by each task, make &lt;code&gt;Arc&lt;&#x2F;code&gt;s to pass cheap, shareable clones for certain values, chunk the list of songs and create and wait for the spawned tasks to finish downloads:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#212121;color:#eeffff;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; parallel_tasks&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; album&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;songs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;() &amp;gt;=&lt;&#x2F;span&gt;&lt;span&gt; cli_args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;parallel_downloads &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    cli_args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;parallel_downloads &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;usize
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    album&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;songs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; songs_per_task &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; album&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;songs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;() &#x2F;&lt;&#x2F;span&gt;&lt;span&gt; parallel_tasks&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; remaining_songs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; album&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;songs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;() %&lt;&#x2F;span&gt;&lt;span&gt; parallel_tasks&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; cli_args &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Arc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;cli_args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; album_art_dir &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Arc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;album_art_dir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; album_name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Arc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;album&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c792ea;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; handles &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffcb6b;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;with_capacity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;parallel_tasks&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c792ea;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; start &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span&gt;parallel_tasks &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c792ea;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; end &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; start &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; songs_per_task&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; remaining_songs &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        end &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; songs_chunk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;album&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;songs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;start&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span&gt;end&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; handle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;tokio&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;download_songs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        file_path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;        cli_args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;        album_art_dir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;        album_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;        songs_chunk&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;to_vec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    start &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; end&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    handles&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;handle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; handle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt; handles &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    handle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;await&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;?;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;tooling&quot;&gt;Tooling&lt;&#x2F;h2&gt;
&lt;p&gt;I dropped &lt;a href=&quot;https:&#x2F;&#x2F;python-poetry.org&#x2F;&quot; title=&quot;https:&#x2F;&#x2F;python-poetry.org&#x2F;&quot;&gt;Poetry&lt;&#x2F;a&gt; as it would not be compatible with the Rust bindings and used simple virtual environments for dependency management, and &lt;a href=&quot;https:&#x2F;&#x2F;twine.readthedocs.io&#x2F;en&#x2F;stable&#x2F;&quot; title=&quot;https:&#x2F;&#x2F;twine.readthedocs.io&#x2F;en&#x2F;stable&#x2F;&quot;&gt;Twine&lt;&#x2F;a&gt; for distributing built wheels.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;pyo3.rs&#x2F;v0.20.0&#x2F;&quot; title=&quot;https:&#x2F;&#x2F;pyo3.rs&#x2F;v0.20.0&#x2F;&quot;&gt;Pyo3&lt;&#x2F;a&gt; acts as the bridge between the parent Python code that calls a single exposed Rust function and enables all the inter-op between the two systems. &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PyO3&#x2F;maturin&quot; title=&quot;https:&#x2F;&#x2F;github.com&#x2F;PyO3&#x2F;maturin&quot;&gt;Maturin&lt;&#x2F;a&gt; compiles the Rust code into a Python library, and also compiles both codebases into a distributable Python wheel.&lt;&#x2F;p&gt;
&lt;p&gt;The following is a list of changes I had to make in my &lt;code&gt;Cargo&lt;&#x2F;code&gt; and &lt;code&gt;pyproject&lt;&#x2F;code&gt; TOML files, to ensure that the build process and &lt;code&gt;pip&lt;&#x2F;code&gt; installed package worked as intended:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Maturin&lt;&#x2F;code&gt; did not recognize the project as a mixed Python-Rust project, hence did not include Rust code in the distributable Python wheel. Setting &lt;code&gt;lib.name&lt;&#x2F;code&gt; table’s value to match Python source directory (&lt;code&gt;spotidl&lt;&#x2F;code&gt;) in &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt; fixed this error.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;pyproject.toml&lt;&#x2F;code&gt; required several modifications — I needed to set the &lt;code&gt;project.scripts&lt;&#x2F;code&gt; value to &lt;code&gt;spoti-dl = &amp;quot;spotidl.main:main&amp;quot;&lt;&#x2F;code&gt;, partially because the project name (&lt;code&gt;spoti-dl&lt;&#x2F;code&gt;) and Python source directory  names were different. I also added the &lt;code&gt;python-packages = [&amp;quot;spotidl&amp;quot;]&lt;&#x2F;code&gt; value under &lt;code&gt;tool.maturin&lt;&#x2F;code&gt; to ensure its inclusion during the build process. I also had to add my dependencies and relevant project metadata in their apt sections, after dropping &lt;code&gt;Poetry&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Maturin&lt;&#x2F;code&gt; compiles the Rust code as a library inside our Python source directory. It adds an underscore &lt;code&gt;_&lt;&#x2F;code&gt; to the library’s name by default, which is quite confusing. I rectified this by configuring the &lt;code&gt;module-name&lt;&#x2F;code&gt; value under &lt;code&gt;tool.maturin&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I faced several problems when attempting to build wheels for Linux using Docker, on my M1 MacBook. I must have easily spent 15-20 hours trying to get the &lt;code&gt;openssl-sys&lt;&#x2F;code&gt; crate to compile as it was the single point of failure, using both the python &lt;code&gt;manylinux&lt;&#x2F;code&gt; and &lt;code&gt;maturin&lt;&#x2F;code&gt; Docker images. I tried to integrate a CI&#x2F;CD setup using GitHub Actions too, but to no avail, as the crate kept failing to compile. You can check the graveyard of my CI’s failed runs &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;dhruv-ahuja&#x2F;spoti-dl&#x2F;actions&quot; title=&quot;https:&#x2F;&#x2F;github.com&#x2F;dhruv-ahuja&#x2F;spoti-dl&#x2F;actions&quot;&gt;here&lt;&#x2F;a&gt;. Eventually I had to settle for manually compiling wheels on Linux, Mac and Windows and copying them to a folder before publishing them with &lt;code&gt;Twine&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;This was a rewarding experience for me, as I dealt with efficiently processing large amounts of data and sharpened my skills with Rust and &lt;code&gt;Tokio&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I witnessed a 20-25% speed increase and 50% less memory consumption in my Rust code when downloading a single song. The development process was smooth as &lt;code&gt;Pyo3&lt;&#x2F;code&gt; and &lt;code&gt;Maturin&lt;&#x2F;code&gt; are very well-documented and provide convenient APIs, make it incredibly easy to get started with writing FFIs for Python.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Implementing a Naive Buffered Queue in Rust</title>
        <published>2023-09-06T00:00:00+00:00</published>
        <updated>2023-09-06T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://dhruvahuja.me/posts/implementing-buffered-queue-in-rust/" type="text/html"/>
        <id>https://dhruvahuja.me/posts/implementing-buffered-queue-in-rust/</id>
        
        <content type="html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;&#x2F;h2&gt;
&lt;p&gt;O’Reilly’s &lt;code&gt;Programming Rust&lt;&#x2F;code&gt; book walks us through optimizing a part of a pipeline, in Chapter 19 &lt;code&gt;Concurrency&lt;&#x2F;code&gt;. It explains how a channel-based pipeline can encounter slowdowns and high memory usage if one of the consumer threads is much slower than one of the producer threads. The producer keeps adding tasks to the queue, but the consumer is unable to consume them at a satisfactory pace. The queue will have a large amount of unconsumed data causing memory spikes. Defining fixed capacities will lower memory consumption in applications without affecting the latencies since the consumer already consumes at its own fixed pace.&lt;&#x2F;p&gt;
&lt;p&gt;I had known about queues but had never thought about them in a larger scope, so I thought attempting a custom implementation would be a good way to learn more. I received a lot of help from the Rust community for this project, allowing me to better understand the concepts and improve my code :)  &lt;&#x2F;p&gt;
&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;&#x2F;h2&gt;
&lt;p&gt;We will walk through the implementation of a simple multi-threaded, blocking, buffered queue. The Producer thread will push elements till the queue is at capacity, and block until the queue has space again. Similarly, the Consumer thread will consume elements till the queue is empty, and block until it has elements again. We do not persist the threads once the input stream is expended.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;declaring-our-types&quot;&gt;Declaring our Types&lt;&#x2F;h2&gt;
&lt;p&gt;We can create a new project with &lt;code&gt;cargo new buffered-queue-rs&lt;&#x2F;code&gt; and put our queue logic in &lt;code&gt;src&#x2F;lib.rs&lt;&#x2F;code&gt;, marking all code inside the file as library code. This makes it accessible to the whole project by importing it with the project name specified in the &lt;code&gt;cargo new&lt;&#x2F;code&gt; command.&lt;&#x2F;p&gt;
&lt;p&gt;Add the following imports to the file:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#212121;color:#eeffff;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#c792ea;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;collections&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;VecDeque&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c792ea;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;sync&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;atomic&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;::{&lt;&#x2F;span&gt;&lt;span&gt;AtomicBool&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; Ordering&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c792ea;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;sync&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;::{&lt;&#x2F;span&gt;&lt;span&gt;Arc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; Condvar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; Mutex&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; MutexGuard&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Next, we will define the types for our buffered queue implementation:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#212121;color:#eeffff;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#c792ea;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Producer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span&gt;Arc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;BufferedQueue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;gt;&amp;gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c792ea;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Consumer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span&gt;Arc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;BufferedQueue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;gt;&amp;gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c792ea;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;BufferedQueue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;Mutex&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;VecDeque&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c792ea;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span&gt;capacity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c792ea;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span&gt;is_full&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;Mutex&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c792ea;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span&gt;is_full_signal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; Condvar,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c792ea;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span&gt;is_empty&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;Mutex&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c792ea;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span&gt;is_empty_signal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; Condvar,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c792ea;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span&gt;elements_processed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; AtomicBool,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;These are &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;ch10-01-syntax.html&quot; title=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;ch10-01-syntax.html&quot;&gt;generic&lt;&#x2F;a&gt; types, signified by the type parameter &lt;code&gt;&amp;lt;T&amp;gt;&lt;&#x2F;code&gt;, and can be used with any type as we have not defined any constraints on the type &lt;code&gt;T&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Producer&lt;&#x2F;code&gt; and &lt;code&gt;Consumer&lt;&#x2F;code&gt; follow the &lt;a href=&quot;https:&#x2F;&#x2F;rust-unofficial.github.io&#x2F;patterns&#x2F;patterns&#x2F;behavioural&#x2F;newtype.html&quot; title=&quot;https:&#x2F;&#x2F;rust-unofficial.github.io&#x2F;patterns&#x2F;patterns&#x2F;behavioural&#x2F;newtype.html&quot;&gt;NewType&lt;&#x2F;a&gt; pattern, allowing us to specify special behaviour on the wrapped type. It will help us separate producer and consumer concerns.&lt;&#x2F;p&gt;
&lt;p&gt;All the defined types use an &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;sync&#x2F;struct.Arc.html&quot; title=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;sync&#x2F;struct.Arc.html&quot;&gt;Arc&lt;&#x2F;a&gt;, a special pointer type that enables cheap shared access to data. It also allows sharing its pointer values across threads, even though the wrapped value might not be shareable. It maintains a reference counter for each reference active in memory, similar to Python objects.&lt;&#x2F;p&gt;
&lt;p&gt;Our internal queue implementation &lt;code&gt;data&lt;&#x2F;code&gt; is a double-ended queue, held by a mutex to prevent data inconsistencies and enforce exclusive data access. &lt;code&gt;capacity&lt;&#x2F;code&gt; is the user-defined maximum capacity for our queue. &lt;code&gt;usize&lt;&#x2F;code&gt; data type ensures that the value cannot be negative. &lt;code&gt;is_full&lt;&#x2F;code&gt; and &lt;code&gt;is_empty&lt;&#x2F;code&gt; indicate the queue’s current state. They will be used by the &lt;code&gt;is_full_signal&lt;&#x2F;code&gt; and &lt;code&gt;is_empty_signal&lt;&#x2F;code&gt; &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;sync&#x2F;struct.Condvar.html&quot; title=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;sync&#x2F;struct.Condvar.html&quot;&gt;Condvars&lt;&#x2F;a&gt; to allow the producer and consumer threads to wait until the queue is in their desired state. &lt;code&gt;elements_processed&lt;&#x2F;code&gt; is an &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;sync&#x2F;atomic&#x2F;struct.AtomicBool.html&quot; title=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;sync&#x2F;atomic&#x2F;struct.AtomicBool.html&quot;&gt;AtomicBool&lt;&#x2F;a&gt; and is thread-safe.  &lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;Operation&lt;&#x2F;code&gt; enum type will signal the queue’s state updates to listening threads. It maps to the queue’s push and pop operations:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#212121;color:#eeffff;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span&gt;Operation&amp;lt;&amp;#39;a&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Push &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; is_full_flag&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;MutexGuard&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c792ea;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;gt; },
&lt;&#x2F;span&gt;&lt;span&gt;    Pop &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; is_empty_flag&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;MutexGuard&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c792ea;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;gt; },
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Acquiring the lock on a mutex returns a &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;sync&#x2F;struct.MutexGuard.html&quot; title=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;sync&#x2F;struct.MutexGuard.html&quot;&gt;MutexGuard&lt;&#x2F;a&gt;, a thin wrapper around the value held by the mutex. The &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;ch10-03-lifetime-syntax.html&quot; title=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;ch10-03-lifetime-syntax.html&quot;&gt;lifetime specifier&lt;&#x2F;a&gt; &lt;code&gt;&amp;lt;’a&amp;gt;&lt;&#x2F;code&gt;  in the type definition indicates how long the boolean flags are going to stay in memory. They are now associated with the enum variants and their held locks will be unlocked when the enum variants go out of scope.&lt;&#x2F;p&gt;
&lt;p&gt;We can see Rust’s powerful enums here, as we can add data on individual variants like we would with a struct.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;defining-producer-and-consumer-logic&quot;&gt;Defining Producer and Consumer Logic&lt;&#x2F;h2&gt;
&lt;p&gt;Producer and consumer have a similar logical flow. Both have 2 methods, the &lt;code&gt;len&lt;&#x2F;code&gt; method is common to both types and wraps a call to &lt;code&gt;BufferedQueue&lt;&#x2F;code&gt;‘s &lt;code&gt;len&lt;&#x2F;code&gt; method.  &lt;&#x2F;p&gt;
&lt;h3 id=&quot;producer&quot;&gt;Producer&lt;&#x2F;h3&gt;
&lt;p&gt;Producer’s implementation is:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#212121;color:#eeffff;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Producer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c792ea;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c792ea;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; queue_is_full &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ff5370;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;0.&lt;&#x2F;span&gt;&lt;span&gt;is_full&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;lock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;queue_is_full &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            queue_is_full &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ff5370;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;0.&lt;&#x2F;span&gt;&lt;span&gt;is_full_signal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;wait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;queue_is_full&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c792ea;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; queue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ff5370;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;0.&lt;&#x2F;span&gt;&lt;span&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;lock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        queue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;push_back&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;pushed element&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ff5370;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;0.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;signal_queue_changes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;            queue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            Operation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;Push &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                is_full_flag&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; queue_is_full&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c792ea;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ff5370;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;0.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;self.0&lt;&#x2F;code&gt; accesses the Producer’s first value in the tuple – the buffered queue Arc, to access its fields and methods.&lt;&#x2F;p&gt;
&lt;p&gt;We first get the &lt;code&gt;queue_is_full&lt;&#x2F;code&gt; boolean value and check whether the queue is full. Code execution will be paused until the queue has space and &lt;code&gt;queue_is_full&lt;&#x2F;code&gt; equals &lt;code&gt;false&lt;&#x2F;code&gt;. The &lt;code&gt;wait&lt;&#x2F;code&gt; method takes a MutexGuard and atomically releases the lock. This enables other threads to update its value. It re-acquires the lock before returning.&lt;&#x2F;p&gt;
&lt;p&gt;We access the internal queue if there is space, push the new element and call the &lt;code&gt;signal_queue_changes&lt;&#x2F;code&gt; method that we will define on &lt;code&gt;BufferedQueue&lt;&#x2F;code&gt; later.&lt;&#x2F;p&gt;
&lt;p&gt;We will also implement the &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;rust-by-example&#x2F;trait&#x2F;drop.html&quot; title=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;rust-by-example&#x2F;trait&#x2F;drop.html&quot;&gt;Drop&lt;&#x2F;a&gt; trait, which will perform cleanup after our producer is out of scope:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#212121;color:#eeffff;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; Drop &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c792ea;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;Producer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;drop&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c792ea;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ff5370;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;0.&lt;&#x2F;span&gt;&lt;span&gt;elements_processed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;store&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;Ordering&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;SeqCst&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We set &lt;code&gt;elements_processed&lt;&#x2F;code&gt; value to &lt;code&gt;true&lt;&#x2F;code&gt;, indicating that the producer has processed all its elements and is going out of scope. The &lt;code&gt;Drop&lt;&#x2F;code&gt; trait ensures that this implementation detail remains associated with the producer.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;store&lt;&#x2F;code&gt; method requires a memory ordering, which defines how application memory is organized and ensures that our code avoids race conditions and improper data access across threads. We use the strongest possible ordering, &lt;code&gt;SeqCst&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;consumer&quot;&gt;Consumer&lt;&#x2F;h3&gt;
&lt;p&gt;Consumer’s methods are as follows:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#212121;color:#eeffff;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;Consumer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c792ea;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;pop&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffcb6b;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c792ea;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; queue_is_empty &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ff5370;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;0.&lt;&#x2F;span&gt;&lt;span&gt;is_empty&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;lock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;queue_is_empty &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ff5370;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;0.&lt;&#x2F;span&gt;&lt;span&gt;elements_processed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;Ordering&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;SeqCst&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffcb6b;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;            queue_is_empty &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ff5370;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;0.&lt;&#x2F;span&gt;&lt;span&gt;is_empty_signal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;wait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;queue_is_empty&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c792ea;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; queue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ff5370;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;0.&lt;&#x2F;span&gt;&lt;span&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;lock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; popped_element &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; queue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;pop_front&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;popped element&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ff5370;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;0.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;signal_queue_changes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;            queue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            Operation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;Pop &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                is_empty_flag&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; queue_is_empty&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        popped_element
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c792ea;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ff5370;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;0.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;pop&lt;&#x2F;code&gt; returns an &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; meaning it will return an enum variant &lt;code&gt;Some(T)&lt;&#x2F;code&gt; from the front of the queue, or &lt;code&gt;None&lt;&#x2F;code&gt; if the queue is empty. We wait for the producer to add elements if the queue is currently empty.&lt;&#x2F;p&gt;
&lt;p&gt;Our implementation guarantees that the queue will only pop an element from front of the queue if there is at least one element. We only return &lt;code&gt;None&lt;&#x2F;code&gt; once &lt;code&gt;elements_processed&lt;&#x2F;code&gt; is &lt;code&gt;true&lt;&#x2F;code&gt;, signalling that we can finish our execution.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;defining-bufferedqueue-logic&quot;&gt;Defining BufferedQueue Logic&lt;&#x2F;h2&gt;
&lt;p&gt;We will first write a function to create a new buffered queue:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#212121;color:#eeffff;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#c792ea;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;buffered_queue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c792ea;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;capacity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;) -&amp;gt; (&lt;&#x2F;span&gt;&lt;span&gt;Producer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;, Consumer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; capacity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        eprintln!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;capacity cannot be lower than 1, defaulting to 1...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;        capacity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; buffered_queue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; BufferedQueue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;Mutex&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;VecDeque&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;with_capacity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;capacity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;)),
&lt;&#x2F;span&gt;&lt;span&gt;        capacity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        is_full&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;Mutex&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;        is_empty&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;Mutex&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;        is_full_signal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;Condvar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;        is_empty_signal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;Condvar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;        elements_processed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;AtomicBool&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;Arc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;buffered_queue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; producer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; Producer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; consumer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; Consumer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;producer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; consumer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;buffered_queue&lt;&#x2F;code&gt; takes a capacity and returns a tuple of Producer and Consumer types. It uses 1 as default if the capacity is 0, wraps the buffered queue value in Arc for cheap referencing and thread-safety, makes a reference copy and passes the Arc instances to Producer and Consumer types.&lt;&#x2F;p&gt;
&lt;p&gt;Now we will implement its methods:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#212121;color:#eeffff;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;BufferedQueue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; queue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ff5370;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;lock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        queue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;signal_queue_changes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;queue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;MutexGuard&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, VecDeque&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;operation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; Operation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; is_empty &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; queue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;() == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; is_full &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; queue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;() == &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ff5370;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;capacity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; operation &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            Operation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;Push &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c792ea;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; is_full_flag &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;} =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c792ea;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; is_empty_flag &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ff5370;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;is_empty&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;lock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;is_empty_flag &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;is_empty_flag &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                    println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;set is_empty to false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ff5370;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;is_empty_signal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;notify_all&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; is_full &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;is_full_flag &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ff5370;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;is_full_signal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;notify_all&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;                    println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;set is_full to true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            Operation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;Pop &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c792ea;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; is_empty_flag &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;} =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c792ea;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; is_full_flag &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ff5370;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;is_full&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;lock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;is_full_flag &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;is_full_flag &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                    println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;set is_full to false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ff5370;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;is_full_signal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;notify_all&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; is_empty &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;is_empty_flag &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ff5370;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;is_empty_signal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;notify_all&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;                    println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;set is_empty to true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This method accepts the internal queue and operation enum types. &lt;code&gt;queue&lt;&#x2F;code&gt; defines the double-ended queue value after acquiring its mutex lock.&lt;&#x2F;p&gt;
&lt;p&gt;We match the operation variants and define their associated boolean values as mutable. Rust allows us to shorthand values if the variable name matches the field name, so we can write &lt;code&gt;{ mut is_full_flag: is_full_flag }&lt;&#x2F;code&gt; as  &lt;code&gt;{ mut is_full_flag }&lt;&#x2F;code&gt; and so on.&lt;&#x2F;p&gt;
&lt;p&gt;The method checks whether the queue’s state has changed: after an element &lt;code&gt;Push&lt;&#x2F;code&gt;, whether the queue is now full and whether it was empty earlier, after an element &lt;code&gt;Pop&lt;&#x2F;code&gt;, whether the queue is now empty and whether it was full before. It notifies waiting threads on the state changes if these conditions match, by calling the Condvars’ &lt;code&gt;notify_all&lt;&#x2F;code&gt; method.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;testing-things-out&quot;&gt;Testing Things Out&lt;&#x2F;h3&gt;
&lt;p&gt;We can now test the functionality by creating a small simulation.&lt;&#x2F;p&gt;
&lt;p&gt;Add the following imports to the top of the &lt;code&gt;src&#x2F;main.rs&lt;&#x2F;code&gt; file:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#212121;color:#eeffff;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#c792ea;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;buffered_queue_rs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;buffered_queue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c792ea;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;thread&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;::{&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#ff5370;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; sleep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c792ea;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;Duration&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Write the following code in the &lt;code&gt;src&#x2F;main.rs&lt;&#x2F;code&gt; file and replace the existing &lt;code&gt;main&lt;&#x2F;code&gt; function:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#212121;color:#eeffff;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;producer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt; consumer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;buffered_queue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c792ea;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; output &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffcb6b;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; producer_handle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;thread&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c792ea;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;|| {
&lt;&#x2F;span&gt;&lt;span&gt;        println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;initializing producer thread...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;..=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; processed_num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; num&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#4a4a4a;&quot;&gt;&#x2F;&#x2F; mock processing behaviour
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;Duration&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;from_millis&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;250&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;            producer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;processed_num&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;});
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; consumer_handle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;thread&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;spawn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c792ea;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;|| {
&lt;&#x2F;span&gt;&lt;span&gt;        println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;initializing consumer thread...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffcb6b;&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;num&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;) =&lt;&#x2F;span&gt;&lt;span&gt; consumer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;pop&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                    println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;exhausted queue, terminating consumer!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;\n&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#c792ea;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#4a4a4a;&quot;&gt;&#x2F;&#x2F; mock processing behaviour
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;Duration&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span&gt;from_millis&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f78c6c;&quot;&gt;400&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;            output&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;num&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;pushed to output num: &lt;&#x2F;span&gt;&lt;span&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c3e88d;&quot;&gt;; output_vec len: &lt;&#x2F;span&gt;&lt;span&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                num&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                output&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;});
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    producer_handle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    consumer_handle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#82aaff;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#89ddff;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We initialize our &lt;code&gt;producer&lt;&#x2F;code&gt; and &lt;code&gt;consumer&lt;&#x2F;code&gt; values by calling &lt;code&gt;buffered_queue&lt;&#x2F;code&gt;, and create a vector for the output produced by the consumer thread.&lt;&#x2F;p&gt;
&lt;p&gt;Then we mark our threads with &lt;code&gt;move&lt;&#x2F;code&gt;, meaning they will take ownership of any values used inside them. We use closures to write the thread logic inside the &lt;code&gt;spawn&lt;&#x2F;code&gt; blocks.&lt;&#x2F;p&gt;
&lt;p&gt;The producer thread iterates over a range of numbers, mocking input processing flow and pushes values to the queue. Meanwhile, the consumer thread processes values received from the &lt;code&gt;pop&lt;&#x2F;code&gt; function, stopping when it receives &lt;code&gt;None&lt;&#x2F;code&gt;, which is the signal to terminate execution.  &lt;&#x2F;p&gt;
&lt;p&gt;Finally, we receive return values of type &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;thread&#x2F;struct.JoinHandle.html&quot; title=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;thread&#x2F;struct.JoinHandle.html&quot;&gt;JoinHandle&lt;&#x2F;a&gt; from the spawned threads and call &lt;code&gt;join&lt;&#x2F;code&gt; on them in the main thread. This ensures that it waits for the other threads to finish before exiting. The &lt;code&gt;unwrap&lt;&#x2F;code&gt; call will propagate any runtime errors in these threads to the main thread.&lt;&#x2F;p&gt;
&lt;p&gt;Running &lt;code&gt;cargo run&lt;&#x2F;code&gt; will output the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;plaintext&quot; style=&quot;background-color:#212121;color:#eeffff;&quot; class=&quot;language-plaintext &quot;&gt;&lt;code class=&quot;language-plaintext&quot; data-lang=&quot;plaintext&quot;&gt;&lt;span&gt;initializing consumer thread...
&lt;&#x2F;span&gt;&lt;span&gt;initializing producer thread...
&lt;&#x2F;span&gt;&lt;span&gt;pushed element
&lt;&#x2F;span&gt;&lt;span&gt;set is_empty to false
&lt;&#x2F;span&gt;&lt;span&gt;popped element
&lt;&#x2F;span&gt;&lt;span&gt;set is_empty to true
&lt;&#x2F;span&gt;&lt;span&gt;pushed element
&lt;&#x2F;span&gt;&lt;span&gt;set is_empty to false
&lt;&#x2F;span&gt;&lt;span&gt;pushed to output num: 1; output_vec len: 1
&lt;&#x2F;span&gt;&lt;span&gt;popped element
&lt;&#x2F;span&gt;&lt;span&gt;set is_empty to true
&lt;&#x2F;span&gt;&lt;span&gt;pushed element
&lt;&#x2F;span&gt;&lt;span&gt;set is_empty to false
&lt;&#x2F;span&gt;&lt;span&gt;pushed element
&lt;&#x2F;span&gt;&lt;span&gt;pushed to output num: 8; output_vec len: 2
&lt;&#x2F;span&gt;&lt;span&gt;popped element
&lt;&#x2F;span&gt;&lt;span&gt;pushed element
&lt;&#x2F;span&gt;&lt;span&gt;pushed to output num: 27; output_vec len: 3
&lt;&#x2F;span&gt;&lt;span&gt;popped element
&lt;&#x2F;span&gt;&lt;span&gt;pushed to output num: 64; output_vec len: 4
&lt;&#x2F;span&gt;&lt;span&gt;popped element
&lt;&#x2F;span&gt;&lt;span&gt;set is_empty to true
&lt;&#x2F;span&gt;&lt;span&gt;pushed to output num: 125; output_vec len: 5
&lt;&#x2F;span&gt;&lt;span&gt;exhausted queue, terminating consumer!
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;This was a rewarding exercise for me, as it helped me get more familiar with Rust and concurrency concepts in general. You can find the full code for the exercise &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;dhruv-ahuja&#x2F;buffered-queue-rs&quot; title=&quot;https:&#x2F;&#x2F;github.com&#x2F;dhruv-ahuja&#x2F;buffered-queue-rs&quot;&gt;here&lt;&#x2F;a&gt;, there are some differences in the code shown here and in the repo.&lt;&#x2F;p&gt;
&lt;p&gt;Thanks for reading my post, any feedback or advice would be appreciated! You can write to me at &lt;a href=&quot;mailto:dhruvahuja2k@gmail.com&quot; title=&quot;mailto:dhruvahuja2k@gmail.com&quot;&gt;my email&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Making My First Open-Source Contribution</title>
        <published>2023-06-11T00:00:00+00:00</published>
        <updated>2023-06-11T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://dhruvahuja.me/posts/first-open-source-contribution/" type="text/html"/>
        <id>https://dhruvahuja.me/posts/first-open-source-contribution/</id>
        
        <content type="html">&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;&#x2F;h2&gt;
&lt;p&gt;The title is a bit devious – it’s not my first open-source contribution per se. I have made a couple of documentation fixes but those don’t count. I just made my first proper, meaningful open-source contribution on June 9th, 2023. This is a small but still meaningful step for me in the right direction, as someone who wants to get going with making significant open-source contributions in the near future. &lt;&#x2F;p&gt;
&lt;p&gt;My contribution to the theme I chose for my website was – I fixed a small issue on the light mode of the theme, and integrated a light-and-dark mode toggle button. Before diving into the nitty-gritty, let&#x27;s go through some recent events that led to my contribution.&lt;&#x2F;p&gt;
&lt;p&gt;I wanted to setup a personal website to use as a space for publishing my thoughts and ideas. Also, I felt that it was about time I setup a site after all. I have recently been learning Rust and have been enjoying the process so I thought I should go with a Rust-based implementation. Upon some basic research I found out about Zola, a Static Site Generator that is fast and easy to get going with, so the choice wasn’t a difficult one.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;selecting-the-theme-and-making-changes&quot;&gt;Selecting the Theme and Making Changes&lt;&#x2F;h2&gt;
&lt;p&gt;So with my decision of using Zola finalized, I looked at the themes list on the site, and there’s one thing I must concede – the number of themes on display is not a lot. I found a couple of themes that I liked and decided to explore the one I found the most appealing as well as content-focused - &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;not-matthias&#x2F;apollo&quot; title=&quot;https:&#x2F;&#x2F;github.com&#x2F;not-matthias&#x2F;apollo&quot;&gt;Apollo&lt;&#x2F;a&gt; which is what the site’s current theme is based on.&lt;&#x2F;p&gt;
&lt;p&gt;On fiddling around with the its code, I found out that the social icons weren&#x27;t loading properly for the light mode. It used an inversion filter to invert their colours from black to white for the site’s dark mode, but the property was active even with the light mode.&lt;&#x2F;p&gt;
&lt;p&gt;So I opened an issue regarding the same and forked the repository in the meantime. I also found &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;XXXMrG&#x2F;archie-zola&#x2F;&quot; title=&quot;https:&#x2F;&#x2F;github.com&#x2F;XXXMrG&#x2F;archie-zola&#x2F;&quot;&gt;Archie-Zola&lt;&#x2F;a&gt;, the theme on which Apollo is based, to have a pleasing neon-green primary aesthetic that I liked more. I also found out that it had a dark and light mode toggle button, which I then wanted to implement in my own fork as well. So I began working on making these changes. &lt;&#x2F;p&gt;
&lt;p&gt;I fixed the problem with the icons’ disappearance relatively quickly, I just needed to move the relevant logic from the main file to the dark mode’s SASS file. Properly integrating the theme toggle button was much more complex and it required me to spend some time understanding the main visual logic of the two themes, and then writing the code, helping me learn about some core frontend styling logic. &lt;&#x2F;p&gt;
&lt;h2 id=&quot;making-the-contribution&quot;&gt;Making The Contribution&lt;&#x2F;h2&gt;
&lt;p&gt;My talks with Apollo&#x27;s creator by this time had also gone well. He encouraged me to open a Pull Request. I then briefly updated him about my fork and asked him whether he would like to have the toggle button in Apollo and he had a positive response again. &lt;&#x2F;p&gt;
&lt;p&gt;I then created a new branch in my fork, made the requisite changes and opened the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;not-matthias&#x2F;apollo&#x2F;pull&#x2F;20&quot; title=&quot;https:&#x2F;&#x2F;github.com&#x2F;not-matthias&#x2F;apollo&#x2F;pull&#x2F;20&quot;&gt;PR&lt;&#x2F;a&gt;.  It was reviewed and merged promptly, meaning I had made my first proper open-source contribution. &lt;&#x2F;p&gt;
&lt;h2 id=&quot;my-experience&quot;&gt;My Experience&lt;&#x2F;h2&gt;
&lt;p&gt;Although this is just a small instance, I had a lot of fun with the whole thing. I had to read up on several less-explored topics. I also got familiar with how the theme operates internally, which has led to me making more tweaks for my website. &lt;&#x2F;p&gt;
&lt;p&gt;I hope this can serve as encouragement for anyone reading this post, to take a look at open-source software and possibly support or take part in the development process. &lt;&#x2F;p&gt;
&lt;p&gt;My plan now is to delve deeper into Rust, learn more about the language and hopefully make more contributions :D&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
